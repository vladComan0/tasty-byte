// Code generated by MockGen. DO NOT EDIT.
// Source: internal/models/recipe_tags.go

// Package mock_models is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/vladComan0/tasty-byte/internal/models"
	transactions "github.com/vladComan0/tasty-byte/pkg/transactions"
)

// MockRecipeTagModelInterface is a mock of RecipeTagModelInterface interface.
type MockRecipeTagModelInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRecipeTagModelInterfaceMockRecorder
}

// MockRecipeTagModelInterfaceMockRecorder is the mock recorder for MockRecipeTagModelInterface.
type MockRecipeTagModelInterfaceMockRecorder struct {
	mock *MockRecipeTagModelInterface
}

// NewMockRecipeTagModelInterface creates a new mock instance.
func NewMockRecipeTagModelInterface(ctrl *gomock.Controller) *MockRecipeTagModelInterface {
	mock := &MockRecipeTagModelInterface{ctrl: ctrl}
	mock.recorder = &MockRecipeTagModelInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRecipeTagModelInterface) EXPECT() *MockRecipeTagModelInterfaceMockRecorder {
	return m.recorder
}

// Associate mocks base method.
func (m *MockRecipeTagModelInterface) Associate(tx transactions.Transaction, recipeID, tagID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Associate", tx, recipeID, tagID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Associate indicates an expected call of Associate.
func (mr *MockRecipeTagModelInterfaceMockRecorder) Associate(tx, recipeID, tagID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Associate", reflect.TypeOf((*MockRecipeTagModelInterface)(nil).Associate), tx, recipeID, tagID)
}

// DissociateNotInList mocks base method.
func (m *MockRecipeTagModelInterface) DissociateNotInList(tx transactions.Transaction, recipeID int, recipeTags []*models.Tag) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DissociateNotInList", tx, recipeID, recipeTags)
	ret0, _ := ret[0].(error)
	return ret0
}

// DissociateNotInList indicates an expected call of DissociateNotInList.
func (mr *MockRecipeTagModelInterfaceMockRecorder) DissociateNotInList(tx, recipeID, recipeTags interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DissociateNotInList", reflect.TypeOf((*MockRecipeTagModelInterface)(nil).DissociateNotInList), tx, recipeID, recipeTags)
}

// deleteRecord mocks base method.
func (m *MockRecipeTagModelInterface) deleteRecord(tx transactions.Transaction, recipeID, tagID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "deleteRecord", tx, recipeID, tagID)
	ret0, _ := ret[0].(error)
	return ret0
}

// deleteRecord indicates an expected call of deleteRecord.
func (mr *MockRecipeTagModelInterfaceMockRecorder) deleteRecord(tx, recipeID, tagID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "deleteRecord", reflect.TypeOf((*MockRecipeTagModelInterface)(nil).deleteRecord), tx, recipeID, tagID)
}

// deleteRecordsByRecipe mocks base method.
func (m *MockRecipeTagModelInterface) deleteRecordsByRecipe(tx transactions.Transaction, recipeID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "deleteRecordsByRecipe", tx, recipeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// deleteRecordsByRecipe indicates an expected call of deleteRecordsByRecipe.
func (mr *MockRecipeTagModelInterfaceMockRecorder) deleteRecordsByRecipe(tx, recipeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "deleteRecordsByRecipe", reflect.TypeOf((*MockRecipeTagModelInterface)(nil).deleteRecordsByRecipe), tx, recipeID)
}

// getTagIDsForRecipe mocks base method.
func (m *MockRecipeTagModelInterface) getTagIDsForRecipe(tx transactions.Transaction, recipeID int) ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getTagIDsForRecipe", tx, recipeID)
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getTagIDsForRecipe indicates an expected call of getTagIDsForRecipe.
func (mr *MockRecipeTagModelInterfaceMockRecorder) getTagIDsForRecipe(tx, recipeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getTagIDsForRecipe", reflect.TypeOf((*MockRecipeTagModelInterface)(nil).getTagIDsForRecipe), tx, recipeID)
}
