// Code generated by MockGen. DO NOT EDIT.
// Source: internal/models/recipe_ingredients.go

// Package mock_models is a generated GoMock package.
package mock_models

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/vladComan0/tasty-byte/internal/models"
	transactions "github.com/vladComan0/tasty-byte/pkg/transactions"
)

// MockRecipeIngredientModelInterface is a mock of RecipeIngredientModelInterface interface.
type MockRecipeIngredientModelInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRecipeIngredientModelInterfaceMockRecorder
}

// MockRecipeIngredientModelInterfaceMockRecorder is the mock recorder for MockRecipeIngredientModelInterface.
type MockRecipeIngredientModelInterfaceMockRecorder struct {
	mock *MockRecipeIngredientModelInterface
}

// NewMockRecipeIngredientModelInterface creates a new mock instance.
func NewMockRecipeIngredientModelInterface(ctrl *gomock.Controller) *MockRecipeIngredientModelInterface {
	mock := &MockRecipeIngredientModelInterface{ctrl: ctrl}
	mock.recorder = &MockRecipeIngredientModelInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRecipeIngredientModelInterface) EXPECT() *MockRecipeIngredientModelInterfaceMockRecorder {
	return m.recorder
}

// Associate mocks base method.
func (m *MockRecipeIngredientModelInterface) Associate(tx transactions.Transaction, recipeID, ingredientID int, quantity float64, unit string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Associate", tx, recipeID, ingredientID, quantity, unit)
	ret0, _ := ret[0].(error)
	return ret0
}

// Associate indicates an expected call of Associate.
func (mr *MockRecipeIngredientModelInterfaceMockRecorder) Associate(tx, recipeID, ingredientID, quantity, unit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Associate", reflect.TypeOf((*MockRecipeIngredientModelInterface)(nil).Associate), tx, recipeID, ingredientID, quantity, unit)
}

// DissociateNotInList mocks base method.
func (m *MockRecipeIngredientModelInterface) DissociateNotInList(tx transactions.Transaction, recipeID int, recipeIngredients []*models.FullIngredient) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DissociateNotInList", tx, recipeID, recipeIngredients)
	ret0, _ := ret[0].(error)
	return ret0
}

// DissociateNotInList indicates an expected call of DissociateNotInList.
func (mr *MockRecipeIngredientModelInterfaceMockRecorder) DissociateNotInList(tx, recipeID, recipeIngredients interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DissociateNotInList", reflect.TypeOf((*MockRecipeIngredientModelInterface)(nil).DissociateNotInList), tx, recipeID, recipeIngredients)
}

// deleteRecord mocks base method.
func (m *MockRecipeIngredientModelInterface) deleteRecord(tx transactions.Transaction, recipeID, ingredientID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "deleteRecord", tx, recipeID, ingredientID)
	ret0, _ := ret[0].(error)
	return ret0
}

// deleteRecord indicates an expected call of deleteRecord.
func (mr *MockRecipeIngredientModelInterfaceMockRecorder) deleteRecord(tx, recipeID, ingredientID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "deleteRecord", reflect.TypeOf((*MockRecipeIngredientModelInterface)(nil).deleteRecord), tx, recipeID, ingredientID)
}

// deleteRecordsByRecipe mocks base method.
func (m *MockRecipeIngredientModelInterface) deleteRecordsByRecipe(tx transactions.Transaction, recipeID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "deleteRecordsByRecipe", tx, recipeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// deleteRecordsByRecipe indicates an expected call of deleteRecordsByRecipe.
func (mr *MockRecipeIngredientModelInterfaceMockRecorder) deleteRecordsByRecipe(tx, recipeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "deleteRecordsByRecipe", reflect.TypeOf((*MockRecipeIngredientModelInterface)(nil).deleteRecordsByRecipe), tx, recipeID)
}

// getIngredientIDsForRecipe mocks base method.
func (m *MockRecipeIngredientModelInterface) getIngredientIDsForRecipe(tx transactions.Transaction, recipeID int) ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getIngredientIDsForRecipe", tx, recipeID)
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getIngredientIDsForRecipe indicates an expected call of getIngredientIDsForRecipe.
func (mr *MockRecipeIngredientModelInterfaceMockRecorder) getIngredientIDsForRecipe(tx, recipeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getIngredientIDsForRecipe", reflect.TypeOf((*MockRecipeIngredientModelInterface)(nil).getIngredientIDsForRecipe), tx, recipeID)
}
