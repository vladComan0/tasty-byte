// Code generated by MockGen. DO NOT EDIT.
// Source: internal/models/recipes.go

// Package mock_models is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/vladComan0/tasty-byte/internal/models"
	transactions "github.com/vladComan0/tasty-byte/pkg/transactions"
)

// MockRecipeModelInterface is a mock of RecipeModelInterface interface.
type MockRecipeModelInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRecipeModelInterfaceMockRecorder
	IngredientModel       *MockIngredientModelInterface
	RecipeIngredientModel *MockRecipeIngredientModelInterface
	TagModel              *MockTagModelInterface
	RecipeTagModel        *MockRecipeTagModelInterface
}

// MockRecipeModelInterfaceMockRecorder is the mock recorder for MockRecipeModelInterface.
type MockRecipeModelInterfaceMockRecorder struct {
	mock *MockRecipeModelInterface
}

// NewMockRecipeModelInterface creates a new mock instance.
func NewMockRecipeModelInterface(ctrl *gomock.Controller) *MockRecipeModelInterface {
	mock := &MockRecipeModelInterface{ctrl: ctrl}
	mock.recorder = &MockRecipeModelInterfaceMockRecorder{mock}
	mock.IngredientModel = NewMockIngredientModelInterface(ctrl)
	mock.RecipeIngredientModel = NewMockRecipeIngredientModelInterface(ctrl)
	mock.TagModel = NewMockTagModelInterface(ctrl)
	mock.RecipeTagModel = NewMockRecipeTagModelInterface(ctrl)

	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRecipeModelInterface) EXPECT() *MockRecipeModelInterfaceMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockRecipeModelInterface) Delete(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRecipeModelInterfaceMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRecipeModelInterface)(nil).Delete), id)
}

// Get mocks base method.
func (m *MockRecipeModelInterface) Get(id int) (*models.Recipe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(*models.Recipe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRecipeModelInterfaceMockRecorder) Get(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRecipeModelInterface)(nil).Get), id)
}

// GetAll mocks base method.
func (m *MockRecipeModelInterface) GetAll() ([]*models.Recipe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]*models.Recipe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockRecipeModelInterfaceMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockRecipeModelInterface)(nil).GetAll))
}

// GetWithTx mocks base method.
func (m *MockRecipeModelInterface) GetWithTx(tx transactions.Transaction, id int) (*models.Recipe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithTx", tx, id)
	ret0, _ := ret[0].(*models.Recipe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithTx indicates an expected call of GetWithTx.
func (mr *MockRecipeModelInterfaceMockRecorder) GetWithTx(tx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithTx", reflect.TypeOf((*MockRecipeModelInterface)(nil).GetWithTx), tx, id)
}

// Insert mocks base method.
func (m *MockRecipeModelInterface) Insert(recipe *models.Recipe) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", recipe)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockRecipeModelInterfaceMockRecorder) Insert(recipe interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockRecipeModelInterface)(nil).Insert), recipe)
}

// Ping mocks base method.
func (m *MockRecipeModelInterface) Ping() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping")
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockRecipeModelInterfaceMockRecorder) Ping() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockRecipeModelInterface)(nil).Ping))
}

// Update mocks base method.
func (m *MockRecipeModelInterface) Update(recipe *models.Recipe) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", recipe)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockRecipeModelInterfaceMockRecorder) Update(recipe interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRecipeModelInterface)(nil).Update), recipe)
}
